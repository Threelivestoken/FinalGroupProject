class Tile:
    def __init__(self, symbol, is_walkable, is_end=False, penalty=0, teleport_to=None):
        self.symbol = symbol
        self.is_walkable = is_walkable
        self.is_end = is_end
        self.penalty = penalty
        self.teleport_to = teleport_to

class GameMap:
    def __init__(self, layout):
        self.layout = layout
        self.map = self.create_map(layout)

    def create_map(self, layout):
        tile_map = []
        for row in layout:
            tile_row = []
            for tile in row:
                if tile == '0':
                    tile_row.append(Tile('0', True))
                elif tile == '&':
                    tile_row.append(Tile('&', True))
                elif tile == '1':
                    tile_row.append(Tile('1', False, penalty=1))
                elif tile == '2':
                    tile_row.append(Tile('2', False, penalty=2))
                elif tile == 'C':
                    tile_row.append(Tile('C', True, is_end=True))
                elif tile == 'T':
                    tile_row.append(Tile('T', True, teleport_to=(0, 0)))  # Example teleport destination
                else:
                    tile_row.append(Tile(tile, False))
            tile_map.append(tile_row)
        return tile_map

    def display_map(self):
        for row in self.map:
            print(' '.join([tile.symbol for tile in row]))

# Example usage
layout = [
    ['0', '0', '1', '2'],
    ['0', '&', 'T', '0'],
    ['0', '0', '0', 'C']
]
game_map = GameMap(layout)
game_map.display_map()
